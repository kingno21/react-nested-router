{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Body","styled","div","_templateObject","Ul","ul","_templateObject2","Li","li","_templateObject3","CustomLink","Link","_templateObject4","App","react_default","a","createElement","className","BrowserRouter","style","height","width","App_Navi","Switch","Route","exact","path","component","Container","Nested","NotFound","Component","_ref","match","border","url","JSON","stringify","params","DContainer","InnerNotFound","Navi","_useToggle","useToggle","_useToggle2","Object","slicedToArray","on","toggle","position","left","top","bottom","background","transform","concat","transition","onClick","fontSize","color","display","justifyContent","alignItems","outline","to","_ref2","_ref3","App_Container","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3adcc0bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport { useToggle } from \"react-use\";\nimport styled from \"@emotion/styled\";\n\nconst Body = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Ul = styled.ul`\n  list-style: none;\n  text-align: left;\n`;\n\nconst Li = styled.li``;\n\nconst CustomLink = styled(Link)`\n  color: #b4b4b4;\n  text-decoration: none;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Router>\n            <div\n              style={{\n                height: \"100%\",\n                width: \"100%\"\n              }}\n            >\n              <Navi />\n              <Switch>\n                <Route exact path=\"/\" component={Container} />\n                <Route exact path=\"/first\" component={Container} />\n                {/* <Route\n                exact\n                path={[\"/second/:route/:item_id\", \"/second/:route\", \"/second\"]}\n                component={Nested}\n              /> */}\n                <Route\n                  exact\n                  path={\"/second/:route/:item_id\"}\n                  component={Nested}\n                />\n                <Route exact path={\"/second/:route\"} component={Nested} />\n                <Route exact path={\"/second\"} component={Nested} />\n                <Route exact component={NotFound} />\n              </Switch>\n            </div>\n          </Router>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst Nested = ({ match }) => {\n  return (\n    <Body\n      style={{\n        border: \"10px solid lightblue\"\n      }}\n    >\n      <div>{match.url}</div>\n      <div>{JSON.stringify(match.params)}</div>\n      <Switch>\n        <Route exact path={`/second/:route`} component={Container} />\n        <Route exact path={`/second/item`} component={Container} />\n        <Route exact path={`/second/item/:item_id`} component={DContainer} />\n        <Route exact component={InnerNotFound} />\n      </Switch>\n    </Body>\n  );\n};\n\nconst Navi = () => {\n  const [on, toggle] = useToggle();\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        bottom: 0,\n        width: 400,\n        background: \"#ffffff\",\n        transform: `translateX(-${on ? 0 : 350}px)`,\n        transition: \"transform 500ms\"\n      }}\n    >\n      <button\n        onClick={() => toggle()}\n        style={{\n          fontSize: 20,\n          color: \"#b4b4b4\",\n          width: 50,\n          height: 50,\n          transform: \"translateX(350px)\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          border: \"none\",\n          outline: \"none\"\n        }}\n      >\n        X\n      </button>\n      <Ul>\n        <Li>\n          <CustomLink to=\"/\">Home</CustomLink>\n        </Li>\n        <Li>\n          <CustomLink to=\"/first\">first</CustomLink>\n        </Li>\n        <Li>\n          <CustomLink to=\"/second\">Nested</CustomLink>\n        </Li>\n        <Li>\n          <CustomLink to=\"/second/route\">Nested/Route</CustomLink>\n        </Li>\n        <Li>\n          <CustomLink to=\"/second/item\">Nested/Item</CustomLink>\n        </Li>\n        <Li>\n          <CustomLink to=\"/second/item/111\">Nested/Item/Id</CustomLink>\n        </Li>\n        <Li>\n          <CustomLink to=\"/testestest\">NotFound</CustomLink>\n        </Li>\n      </Ul>\n    </div>\n  );\n};\n\nconst Container = ({ match }) => {\n  return (\n    <Body\n      style={{\n        border: \"10px solid #fff\"\n      }}\n    >\n      <div>{match.url}</div>\n      <div>{JSON.stringify(match.params)}</div>\n    </Body>\n  );\n};\n\nconst DContainer = ({ match }) => {\n  return (\n    <Body\n      style={{\n        border: \"10px solid pink\"\n      }}\n    >\n      <div>{JSON.stringify(match.params)}</div>\n      <Container match={match} />\n    </Body>\n  );\n};\n\nconst InnerNotFound = () => {\n  return <Body>Inner NotFound</Body>;\n};\n\nconst NotFound = () => {\n  return <Body>NotFound</Body>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}